source('C:/Users/crtif/Desktop/ASVclustr/asvclustrworkcurrent/asv_clustr_example.R', encoding = 'UTF-8')
source('C:/Users/crtif/Desktop/ASVclustr/asvclustrworkcurrent/asv_clustr_example.R', encoding = 'UTF-8')
?usethis::use_data
usethis::use_data(seqmat, taxmat, meta, abs_abund)
melt_asv_list <- function(asv_list, ratio=FALSE, rescale=FALSE, sam_var, time_var){
if (!isClass(asv_list, Class = c("list", "ASVclustr"))){
stop("asv_list must be a list object with class ASVclustr")
}
if (ratio==FALSE){
#'access seqmat and melt into long form of 3 columns. SampleID, ASV, and
seqmat <- as.data.frame(asv_list$seqmat)
} else if (ratio==TRUE){
seqmat <- t(asv_list$seqmat)
seqmat <- apply(seqmat, FUN = function(x) x/sum(x), 2)
seqmat <- as.data.frame(t(seqmat))
}
#' rescale values between 0 and 1
if (rescale==TRUE){
meta <- asv_list$meta
rescale <- function(x){
x <- (as.matrix(x)-min(as.matrix(x)))/(max(as.matrix(x))-min(as.matrix(x)))
return(x)
}
seqmat_order_list <- order_seqmat(seqmat = seqmat, meta = meta, sam_var = sam_var, time_var = time_var)
#'remove all metadata variables from each data.frame in the list except for the timepoint variable
seqmat_order_list <- lapply(seqmat_order_list, function(x)
x[!(names(x) %in% c("SampleID","sample", "timepoint"))])
seqmat_order_list <- lapply(seqmat_order_list, function(x) sapply(x,  rescale))
#' convert NA to 0
conv_na_zero <- function(x){
x[is.na(x)] <- 0
return(x)
}
seqmat_order_list <- lapply(seqmat_order_list, conv_na_zero)
seqmat <- do.call("rbind", seqmat_order_list)
rownames(seqmat) <- rownames(seqmat_order)
seqmat <- as.data.frame(seqmat)
} else  if (rescale==FALSE){
seqmat <- seqmat
meta <- asv_list$meta
meta$SampleID <- rownames(meta)
}
#'create SampleID column to left join with taxa and metadata and then melt to longform
seqmat$SampleID <- rownames(seqmat)
seqmat_melt <- melt(seqmat)
colnames(seqmat_melt)[2] <- "OTU"
colnames(seqmat_melt)[3] <- "Abundance"
taxa <- as.data.frame(asv_list$taxmat)
taxa$OTU <- as.factor(rownames(taxa))
h_clust <- asv_list$h_clust
#'left join to meta, then to taxa, then to cluster
asv_melt <- left_join(seqmat_melt, meta, "SampleID")
asv_melt <- left_join(asv_melt, taxa, "OTU")
if (!is.null(asv_list$h_clust)){
h_clust <- asv_list$h_clust
asv_melt <- left_join(asv_melt, h_clust, "OTU")
}
return(asv_melt)
}
melted_asv_list <- melt_asv_list(asv_list = asv_list, sam_var = "Sample", time_var = "Timepoint")
usethis::use_data(melted_asv_list)
library(phangorn)
library(dada2)
library(DECIPHER)
seqs <- getSequences(asv_list$seqmat)
names(seqs) <- seqs # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,verbose=FALSE)
phangAlign <- phangorn::phyDat(as(alignment, "matrix"), type="DNA")
dm <- phangorn::dist.ml(phangAlign)
treeNJ <- phangorn::NJ(dm) # Note, tip order != sequence order
fit = phangorn::pml(treeNJ, data=phangAlign)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- phangorn::optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = phangorn::pml.control(trace = 0))
detach("package:phangorn", unload=TRUE)
phangtree <- fitGTR
usethis::use_data(phangtree)
usethis::use_data(asv_list)
library(roxygen2)
library(devtools)
document("ASVclustr")
document()
install("ASVclustr")
install()
install()
document()
install()
?asv_clustr
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
